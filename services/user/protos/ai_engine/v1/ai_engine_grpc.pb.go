// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: services/user/protos/ai_engine/v1/ai_engine.proto

package ai_engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageAPIClient is the client API for ImageAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageAPIClient interface {
	// Enrollment API
	Enroll(ctx context.Context, in *ImageEnrollmentRequest, opts ...grpc.CallOption) (*ImageEnrollmentResponse, error)
	// Search user_uid by image
	Search(ctx context.Context, in *ImageSearchRequest, opts ...grpc.CallOption) (*ImageSearchResponse, error)
}

type imageAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewImageAPIClient(cc grpc.ClientConnInterface) ImageAPIClient {
	return &imageAPIClient{cc}
}

func (c *imageAPIClient) Enroll(ctx context.Context, in *ImageEnrollmentRequest, opts ...grpc.CallOption) (*ImageEnrollmentResponse, error) {
	out := new(ImageEnrollmentResponse)
	err := c.cc.Invoke(ctx, "/ai_engine.ImageAPI/Enroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageAPIClient) Search(ctx context.Context, in *ImageSearchRequest, opts ...grpc.CallOption) (*ImageSearchResponse, error) {
	out := new(ImageSearchResponse)
	err := c.cc.Invoke(ctx, "/ai_engine.ImageAPI/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageAPIServer is the server API for ImageAPI service.
// All implementations must embed UnimplementedImageAPIServer
// for forward compatibility
type ImageAPIServer interface {
	// Enrollment API
	Enroll(context.Context, *ImageEnrollmentRequest) (*ImageEnrollmentResponse, error)
	// Search user_uid by image
	Search(context.Context, *ImageSearchRequest) (*ImageSearchResponse, error)
	mustEmbedUnimplementedImageAPIServer()
}

// UnimplementedImageAPIServer must be embedded to have forward compatible implementations.
type UnimplementedImageAPIServer struct {
}

func (UnimplementedImageAPIServer) Enroll(context.Context, *ImageEnrollmentRequest) (*ImageEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enroll not implemented")
}
func (UnimplementedImageAPIServer) Search(context.Context, *ImageSearchRequest) (*ImageSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedImageAPIServer) mustEmbedUnimplementedImageAPIServer() {}

// UnsafeImageAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageAPIServer will
// result in compilation errors.
type UnsafeImageAPIServer interface {
	mustEmbedUnimplementedImageAPIServer()
}

func RegisterImageAPIServer(s grpc.ServiceRegistrar, srv ImageAPIServer) {
	s.RegisterService(&ImageAPI_ServiceDesc, srv)
}

func _ImageAPI_Enroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageAPIServer).Enroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_engine.ImageAPI/Enroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageAPIServer).Enroll(ctx, req.(*ImageEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageAPI_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageAPIServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_engine.ImageAPI/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageAPIServer).Search(ctx, req.(*ImageSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageAPI_ServiceDesc is the grpc.ServiceDesc for ImageAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_engine.ImageAPI",
	HandlerType: (*ImageAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enroll",
			Handler:    _ImageAPI_Enroll_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _ImageAPI_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/user/protos/ai_engine/v1/ai_engine.proto",
}
