// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: services/user/protos/faiss/v1/faiss.proto

package faiss

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VectorAPIClient is the client API for VectorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VectorAPIClient interface {
	// Enrollment API
	Enroll(ctx context.Context, in *VectorEnrollmentRequest, opts ...grpc.CallOption) (*VectorEnrollmentResponse, error)
	// Search user_uid by vector
	Search(ctx context.Context, in *VectorSearchRequest, opts ...grpc.CallOption) (*VectorSearchResponse, error)
	// Remove user_uid and its face images in DB
	Delete(ctx context.Context, in *VectorDeletionRequest, opts ...grpc.CallOption) (*VectorDeletionResponse, error)
}

type vectorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewVectorAPIClient(cc grpc.ClientConnInterface) VectorAPIClient {
	return &vectorAPIClient{cc}
}

func (c *vectorAPIClient) Enroll(ctx context.Context, in *VectorEnrollmentRequest, opts ...grpc.CallOption) (*VectorEnrollmentResponse, error) {
	out := new(VectorEnrollmentResponse)
	err := c.cc.Invoke(ctx, "/faiss.VectorAPI/Enroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorAPIClient) Search(ctx context.Context, in *VectorSearchRequest, opts ...grpc.CallOption) (*VectorSearchResponse, error) {
	out := new(VectorSearchResponse)
	err := c.cc.Invoke(ctx, "/faiss.VectorAPI/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorAPIClient) Delete(ctx context.Context, in *VectorDeletionRequest, opts ...grpc.CallOption) (*VectorDeletionResponse, error) {
	out := new(VectorDeletionResponse)
	err := c.cc.Invoke(ctx, "/faiss.VectorAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VectorAPIServer is the server API for VectorAPI service.
// All implementations must embed UnimplementedVectorAPIServer
// for forward compatibility
type VectorAPIServer interface {
	// Enrollment API
	Enroll(context.Context, *VectorEnrollmentRequest) (*VectorEnrollmentResponse, error)
	// Search user_uid by vector
	Search(context.Context, *VectorSearchRequest) (*VectorSearchResponse, error)
	// Remove user_uid and its face images in DB
	Delete(context.Context, *VectorDeletionRequest) (*VectorDeletionResponse, error)
	mustEmbedUnimplementedVectorAPIServer()
}

// UnimplementedVectorAPIServer must be embedded to have forward compatible implementations.
type UnimplementedVectorAPIServer struct {
}

func (UnimplementedVectorAPIServer) Enroll(context.Context, *VectorEnrollmentRequest) (*VectorEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enroll not implemented")
}
func (UnimplementedVectorAPIServer) Search(context.Context, *VectorSearchRequest) (*VectorSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedVectorAPIServer) Delete(context.Context, *VectorDeletionRequest) (*VectorDeletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVectorAPIServer) mustEmbedUnimplementedVectorAPIServer() {}

// UnsafeVectorAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VectorAPIServer will
// result in compilation errors.
type UnsafeVectorAPIServer interface {
	mustEmbedUnimplementedVectorAPIServer()
}

func RegisterVectorAPIServer(s grpc.ServiceRegistrar, srv VectorAPIServer) {
	s.RegisterService(&VectorAPI_ServiceDesc, srv)
}

func _VectorAPI_Enroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorAPIServer).Enroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faiss.VectorAPI/Enroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorAPIServer).Enroll(ctx, req.(*VectorEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorAPI_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorAPIServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faiss.VectorAPI/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorAPIServer).Search(ctx, req.(*VectorSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faiss.VectorAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorAPIServer).Delete(ctx, req.(*VectorDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VectorAPI_ServiceDesc is the grpc.ServiceDesc for VectorAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VectorAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "faiss.VectorAPI",
	HandlerType: (*VectorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enroll",
			Handler:    _VectorAPI_Enroll_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _VectorAPI_Search_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VectorAPI_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/user/protos/faiss/v1/faiss.proto",
}
