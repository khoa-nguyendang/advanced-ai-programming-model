syntax = "proto3";
option go_package = "services/user/protos/user/v1;user_service";
package user_service;

enum UserState { USER_ENABLED = 0; USER_DISABLED = 1; USER_DELETED = 2; }
enum RoleType {SYSTEM_USER_ROLE = 0; FACEID_USER_ROLE = 1;}

service User {
    rpc Enroll(EnrollRequest) returns(EnrollResponse);
    rpc Verify(VerifyRequest) returns(VerifyResponse);
    rpc GetUser(GetUserRequest) returns(GetUserResponse);
    rpc CountUser(CountUserRequest) returns(CountUserResponse);
    rpc SearchUser(SearchUserRequest) returns(SearchUserResponse);
    rpc Update(UpdateRequest) returns(UpdateResponse);
    rpc Delete(DeleteRequest) returns(DeleteResponse);

}

message GetRolesRequest {}
message RoleInfo {
    int64 id = 1;
    string role_name = 2;
    RoleType role_type = 3;
}
message GetRolesResponse {
    repeated RoleInfo roles = 1;
}

message GetGroupsRequest {
    int64 company_id = 1;
    string company_code = 2;
}
message GroupInfo {
    int64 id = 1;
    string group_name = 2;
    int64 company_id = 3;
    string company_code = 4;
    string group_info = 5;
}
message GetGroupsResponse {
    int32 code = 1;
    string message = 2;
    string error = 3;

    repeated GroupInfo data = 4;
}

message GetPermissionsRequest {}
message PermissionInfo {
    int64 id = 1;
    string permission_name = 3;
}
message GetPermissionsResponse {
    repeated PermissionInfo permissions = 1;
}

message GetUserPermissionsRequest {
    int64 app_user_id = 1;
    string user_id = 2;
}
message UserPermission {
    int64 app_user_id = 1;
    int64 permission_id = 2;
    int64 role_id = 3;
}

message GetUserPermissionsResponse {
    repeated UserPermission user_permissions = 1;
}





message Image {
    bytes data = 1;
    string image_id = 2;
}

message EnrollRequest {
    string user_id = 1; // User ID - Must be unique
    string user_name = 2; // Full name
    string user_info = 3; // Additional user info
    string user_role = 4; // Mapping to User Role table
    repeated string user_groups = 5; // Mapping to Use Group table

    int64 user_role_id = 17;
    repeated int64 user_group_ids = 18;
    repeated Image images = 20; // Face images
    string reference_id = 21;   // For system integration. Don't use at this time

    //expiry date
    int64 expiry_date = 23;
    //active from date
    int64 activation_date = 24;
}

message EnrollResponse {
    int32 code = 1;
    string message = 2;
    string error = 3;

    UserState state = 4;
}

message VerifyRequest {
    repeated Image images = 1; 
}

message VerifyResponse {
    int32 code = 1;
    string message = 2;
    string error = 3;


    string user_id = 4;
    string user_name = 5;
    string user_info = 6;
    UserState state = 7;

    string user_role = 8;
    repeated string user_groups = 9;

    string image_id = 10;
    double score = 11;
    string thumbnail_image_url = 12;

    int64 last_modified = 13;
    int64 issued_date = 22;
    //expiry date
    int64 expiry_date = 23;
    //active from date
    int64 activation_date = 24;

    bool is_active = 25;
}

message GetUserRequest {
    int64 user_role_id = 1; // Filter by role id
    repeated int64 user_group_ids = 2; // Filter by group ids
    repeated string user_ids = 3; // Filter by user id
    repeated string reference_ids = 21;   // For system integration. Don't use at this time
    int64 current_page = 30;
    int64 page_size = 31; 
}

message UserData {
    string user_id = 1;
    string user_name = 2;
    string user_role = 3;
    repeated string user_groups = 4;
    string user_info = 5; // Additional user info
    int64 last_modified = 6;
    UserState state = 7;
    string thumbnail_image_url = 8;
    repeated string registered_image_urls = 9;

    int64 user_role_id = 17;
    repeated int64 user_group_ids = 18;

    repeated Image images = 20; // Face images - Allows to update
    string reference_id = 21;   // For system integration. Don't use at this time

    int64 issued_date = 22;
    //expiry date
    int64 expiry_date = 23;
    //active from date
    int64 activation_date = 24;

    bool is_active = 25;
}

message GetUserResponse {
    repeated UserData users = 1;
    int64 current_page = 30;
    int64 page_size = 31; 
    int64 total_count = 32;
}

message CountUserRequest {
    int64 user_role_id = 1;
}

message CountUserResponse {
    int64 total_count = 1;
}

enum SearchType {PREFIX = 0; WILDCARD = 1;}
enum UserAttribute {USER_ID = 0; USER_NAME = 1; USER_INFO = 2;}

message SearchUserRequest {
    SearchType search_type = 1;
    UserAttribute search_by = 2;
    string keyword = 3;
    int64 user_role_id = 4;
}

message SearchUserResponse {
    int64 total = 1;
    repeated UserData users = 2; 
}

message UpdateRequest {
    string user_id = 1; // Must exist in the system
    string user_name = 2;
    string user_role = 3;
    repeated string user_groups = 4;
    string user_info = 5; // Additional user info
    UserState state = 7;

    int64 user_role_id = 17;
    repeated int64 user_group_ids = 18;
    repeated Image images = 20; // Add more face images
    string reference_id = 21;   // For system integration. Don't use at this time
    //expiry date
    int64 expiry_date = 23;
    //active from date
    int64 activation_date = 24;
}

message UpdateResponse {
    int32 code = 1;
    string message = 2;
    string error = 3;
}

message DeleteRequest {
    repeated string user_ids = 1;
    repeated string reference_ids = 21;   // For system integration. Don't use at this time
}

message DeleteResponse {
    int32 code = 1;
    string message = 2;
    string error = 3;

    repeated string user_ids = 4;
    repeated string reference_ids = 21;   // For system integration. Don't use at this time
}

// User Group
enum GroupState {
    GROUP_STATE_ACTIVATED = 0;
	GROUP_STATE_DEACTIVATED = 1;
	GROUP_STATE_DELETED = 2;
}

message CreateUserGroupRequest{
    string name = 1;
    string description = 2;
}

message CreateUserGroupResponse{
    string name = 1;
    string description = 2;
    GroupState state = 3;
    int64 last_modified = 4;
}

message UpdateUserGroupRequest{
    string name = 1;
    string description = 2;
    GroupState state = 3;
}

message UpdateUserGroupResponse{
    string name = 1;
    string description = 2;
    GroupState state = 3;
    int64 last_modified = 4;
}

message GetUserGroupRequest{
    repeated string names = 1;
}

message GetUserGroupResponse{
    repeated CreateUserGroupResponse groups = 1;
}

message DeleteUserGroupRequest{
    repeated string names = 1;
}

message DeleteUserGroupResponse{
    repeated string deleted_names = 1;
}
